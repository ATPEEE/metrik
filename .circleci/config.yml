version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.2
  aws-cli: circleci/aws-cli@1.3.2

jobs:
  backend-test-and-build:
    docker:
      - image: circleci/openjdk:11.0.8-jdk
        environment:
          TZ: "Asia/Shanghai"
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-gradle-wrapper-{{ .Branch }}-{{ checksum "backend/gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          keys:
            - v1-gradle-cache-{{ .Branch }}-{{ checksum "backend/build.gradle.kts" }}
      - run:
          name: Run tests and build artifact
          command: ./gradlew build
          working_directory: backend
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ .Branch }}-{{ checksum "backend/gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ .Branch }}-{{ checksum "backend/build.gradle.kts" }}
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
          working_directory: backend
      - persist_to_workspace:
          root: ./
          paths:
            - backend/run.sh
            - backend/build/libs/4-key-metrics-backend-*.jar

  frontend-test-and-build:
    docker:
      - image: circleci/node:14.15.4
        environment:
          TZ: "Asia/Shanghai"
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm ci
          working_directory: frontend
      - save_cache:
          paths:
            - node_modules
          key: node-v1-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Run tests
          command: npm run test
          working_directory: frontend
      - run:
          name: Build artifacts
          command: npm run build:prod
          working_directory: frontend
      - persist_to_workspace:
          root: ./
          paths:
            - frontend/dist

  build-publish-latest-version:
    docker:
      - image: cimg/base:2021.01
        environment:
          TZ: "Asia/Shanghai"
    resource_class: small
    steps:
      - checkout
      - run:
          name: Create attached workspace folder
          command: mkdir ./artifacts
          working_directory: ci
      - attach_workspace:
          at: ./ci/artifacts
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false
      - run:
          name: Build and tag Docker image
          command: docker build -f ./Dockerfile -t ${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO}:latest .
          working_directory: ci
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: Docker login with AWS CLI
          command: aws ecr-public get-login-password --region ${AWS_PUBLIC_REPO_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
      - aws-ecr/push-image:
          repo: ${AWS_ECR_REPO}
          tag: latest

  deploy-latest-version-to-sandbox:
    docker:
      - image: cimg/base:2021.01
        environment:
          TZ: "Asia/Shanghai"
    resource_class: small

    steps:
      - add_ssh_keys:
          fingerprints:
            - "00:bb:8f:34:ae:be:33:3f:66:81:fc:ee:f5:96:96:5e"
      - run:
          name: Add remote sandbox host to trust-host
          command: |
              ssh-keyscan -H -p ${SANDBOX_SSH_PORT} ${SANDBOX_SSH_HOST} >> ~/.ssh/known_hosts
      - run:
          name: Login and deploy the latest version to Sandbox
          command: |
              ssh ${SANDBOX_SSH_USER}@${SANDBOX_SSH_HOST} -p ${SANDBOX_SSH_PORT} "
                CONTAINER_NAME=4km
                CURRENT_CONTAINER_ID=\$(docker ps -aqf name=\$CONTAINER_NAME)

                if [ ! -z \$CURRENT_CONTAINER_ID ]; then
                  echo \"Killing existing docker container...\"
                  sudo docker container stop \$CURRENT_CONTAINER_ID
                  sudo docker container rm \$CURRENT_CONTAINER_ID
                fi

                echo \"Untag old image...\"
                sudo docker rmi -f ${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO}

                echo \"Deploying with the latest image...\"
                sudo docker run --name \$CONTAINER_NAME -d -p 80:80 -p 9000:9000 -p 27017:27017 -v "/root/app/data/db:/data/db" -v "/root/app/logs:/app/logs" --restart always ${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO}:latest

                echo \"Cleaning up...\"
                sudo docker system prune -f
              "
      - run: echo "Deploymend to sandbox DONE."

  build-publish-release-version:
    docker:
      - image: cimg/base:2021.01
        environment:
          TZ: "Asia/Shanghai"
    resource_class: small
    steps:
      - checkout
      - run:
          name: Create attached workspace folder
          command: mkdir ./artifacts
          working_directory: ci
      - attach_workspace:
          at: ./ci/artifacts
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false
      - run:
          name: Build and tag Docker image
          command: docker build -f ./Dockerfile -t ${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO}:<< pipeline.git.tag >> .
          working_directory: ci
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: Docker login with AWS CLI
          command: aws ecr-public get-login-password --region ${AWS_PUBLIC_REPO_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
      - aws-ecr/push-image:
          repo: ${AWS_ECR_REPO}
          tag: << pipeline.git.tag >>


workflows:
  version: 2

  build-image-and-deploy-sandbox:
    unless: << pipeline.git.tag >>
    jobs:
      - frontend-test-and-build
      - backend-test-and-build
      - build-publish-latest-version:
          requires:
            - frontend-test-and-build
            - backend-test-and-build
      - deploy-latest-version-to-sandbox:
          requires:
            - build-publish-latest-version

  build-release-image:
    when: << pipeline.git.tag >>
    jobs:
      - frontend-test-and-build:
          filters: &release_version_tag_only
            tags:
              only: /^(\d+\.)?(\d+\.)?(\*|\d+)/
            branches:
              ignore: /.*/
      - backend-test-and-build:
          filters:
            <<: *release_version_tag_only
      - build-publish-release-version:
          filters:
            <<: *release_version_tag_only
          requires:
            - frontend-test-and-build
            - backend-test-and-build
